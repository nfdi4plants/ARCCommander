namespace ArcCommander.CLIArguments

open Argu 
open ArcCommander.ArgumentProcessing

/// CLI arguments for interactively editing existing study metadata.
type StudyEditArgs =
    | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of study_identifier : string

    interface IArgParserTemplate with
        member this.Usage =
            match this with
            | StudyIdentifier _->    "A unique identifier, either a temporary identifier supplied by users or one generated by a repository or other database. For example, it could be an identifier complying with the LSID specification."

/// CLI arguments for updating existing study metadata.
type StudyUpdateArgs =
    | [<Mandatory>][<AltCommandLine("-s")>][<Unique>][<FileName>]   StudyIdentifier         of study_identifier : string
    | [<Unique>]                                                    Title                   of title : string
    | [<Unique>]                                                    Description             of description : string
    | [<Unique>]                                                    SubmissionDate          of submission_date : string
    | [<Unique>]                                                    PublicReleaseDate       of public_release_date : string
    | [<Unique>]                                                    ReplaceWithEmptyValues
    | [<Unique>]                                                    AddIfMissing

    interface IArgParserTemplate with
        member this.Usage =
            match this with
            | StudyIdentifier           _ -> "A unique identifier, either a temporary identifier supplied by users or one generated by a repository or other database. For example, it could be an identifier complying with the LSID specification."
            | Title                     _ -> "A concise phrase used to encapsulate the purpose and goal of the study"
            | Description               _ -> "A textual description of the study, with components such as objective or goals"
            | SubmissionDate            _ -> "The date on which the study is submitted to an archive"
            | PublicReleaseDate         _ -> "The date on which the study SHOULD be released publicly"
            | ReplaceWithEmptyValues    _ -> "This flag can be used to delete fields from the study. If this flag is not set, only these fields for which a value was given will be updated."
            | AddIfMissing              _ -> "If this flag is set, a new study will be registered with the given parameters, if it did not previously exist"


/// CLI arguments for registering existing study metadata.
type StudyInitArgs = 
    | [<Mandatory>][<AltCommandLine("-s")>][<Unique>][<FileName>] StudyIdentifier of study_identifier : string
    | [<Unique>] Title of title : string
    | [<Unique>] Description of description : string
    | [<Unique>] SubmissionDate of submission_date : string
    | [<Unique>] PublicReleaseDate of public_release_date : string

    interface IArgParserTemplate with
        member this.Usage =
            match this with
            | StudyIdentifier _->    "A unique identifier, either a temporary identifier supplied by users or one generated by a repository or other database. For example, it could be an identifier complying with the LSID specification."
            | Title _->         "A concise phrase used to encapsulate the purpose and goal of the study"
            | Description _->   "A textual description of the study, with components such as objective or goals"
            | SubmissionDate _->   "The date on which the study is submitted to an archive"
            | PublicReleaseDate _->   "The date on which the study SHOULD be released publicly"

// Same arguments as `init` because the study can be identified just by the identifier
/// CLI arguments for empty study initialization.
type StudyRegisterArgs = StudyEditArgs

/// CLI arguments for initializing and subsequently registering study metadat.
// Same arguments as `update` because all metadata fields that can be updated can also be set while registering a new assay
type StudyAddArgs = StudyInitArgs

/// CLI arguments for study deletion.
type StudyDeleteArgs = 
    | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of study_identifier : string
    | [<Unique>] Force

    interface IArgParserTemplate with
        member this.Usage =
            match this with
            | StudyIdentifier _  -> "A unique identifier, either a temporary identifier supplied by users or one generated by a repository or other database. For example, it could be an identifier complying with the LSID specification."
            | Force         -> "Forces deletion of all subfolders and -files, no matter if they are user-specific or not"

/// CLI arguments for study removal.
// same as `init` because both commands only need to be passed a study identifier
type StudyUnregisterArgs = StudyEditArgs

/// CLI arguments for study removal.
// same as `init` because both commands only need to be passed a study identifier
type StudyRemoveArgs = StudyDeleteArgs

/// CLI arguments for getting a study.
// same as `init` because both commands only need to be passed a study identifier
type StudyShowArgs = StudyEditArgs

/// CLI arguments for study contacts.
module StudyContacts = 

    /// CLI arguments for updating existing person metadata.
    type PersonUpdateArgs =  
        | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of string
        | [<Mandatory>][<AltCommandLine("-l")>][<Unique>] LastName of last_name : string
        | [<Mandatory>][<AltCommandLine("-f")>][<Unique>] FirstName of first_name : string
        | [<AltCommandLine("-m")>][<Unique>] MidInitials of mid_initials : string
        | [<Unique>] Email of e_mail : string
        | [<Unique>] Phone of phone_number : string
        | [<Unique>] Fax of fax_number : string
        | [<Unique>] Address of adress : string
        | [<Unique>] Affiliation of affiliation : string
        | [<Unique>] ORCID of orcid : string
        | [<Unique>] Roles of roles : string
        | [<Unique>] RolesTermAccessionNumber of roles_term_accession_number : string
        | [<Unique>] RolesTermSourceREF of roles_term_source_ref : string
        | [<Unique>] ReplaceWithEmptyValues
        | [<Unique>] AddIfMissing

        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | StudyIdentifier           _ -> "Identifier of the study the person is associated with"
                | LastName                  _ -> "The last name of a person associated with the study"
                | FirstName                 _ -> "The first name of a person associated with the study"
                | MidInitials               _ -> "The middle initials of a person associated with the study"
                | Email                     _ -> "The email address of a person associated with the study"
                | Phone                     _ -> "The telephone number of a person associated with the study"
                | Fax                       _ -> "The fax number of a person associated with the study"
                | Address                   _ -> "The address of a person associated with the study"
                | Affiliation               _ -> "The organization affiliation for a person associated with the study"
                | ORCID                     _ -> "The ORCID ID of the person"
                | Roles                     _ -> "Term to classify the role(s) performed by this person in the context of the study, which means that the roles reported here do not need to correspond to roles held withing their affiliated organization. Multiple annotations or values attached to one person can be provided by using a semicolon (“;”) Unicode (U0003+B) as a separator (e.g.: submitter;funder;sponsor). The term can be free text or from, for example, a controlled vocabulary or an ontology. If the latter source is used, the Term Accession Number (TAN) and Term Source REF fields below are required."
                | RolesTermAccessionNumber  _ -> "The accession number from the Term Source associated with the selected term"
                | RolesTermSourceREF        _ -> "Identifies the controlled vocabulary or ontology that this term comes from. The Source REF has to match one of the Term Source Names declared in the Ontology Source Reference section."
                | ReplaceWithEmptyValues    _ -> "This flag can be used to delete fields from the assay. If this flag is not set, only these fields for which a value was given will be updated."
                | AddIfMissing              _ -> "If this flag is set, a new person will be registered with the given parameters, if it did not previously exist"

    /// CLI arguments for interactively editing existing person metadata.
    type PersonEditArgs = 
        | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of string
        | [<Mandatory>][<AltCommandLine("-l")>][<Unique>] LastName of last_name : string
        | [<Mandatory>][<AltCommandLine("-f")>][<Unique>] FirstName of first_name : string
        | [<AltCommandLine("-m")>][<Unique>] MidInitials of mid_initials : string
        
        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | StudyIdentifier           _ -> "Identifier of the study the person is associated with"
                | LastName                  _ -> "The last name of a person associated with the study"
                | FirstName                 _ -> "The first name of a person associated with the study"
                | MidInitials               _ -> "The middle initials of a person associated with the study"

    /// CLI arguments for registering person metadata.
    type PersonRegisterArgs = 
        | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of string
        | [<Mandatory>][<AltCommandLine("-l")>][<Unique>] LastName of last_name : string
        | [<Mandatory>][<AltCommandLine("-f")>][<Unique>] FirstName of first_name : string
        | [<AltCommandLine("-m")>][<Unique>] MidInitials of mid_initials : string
        | [<Unique>] Email of e_mail : string
        | [<Unique>] Phone of phone_number : string
        | [<Unique>] Fax of fax_number : string
        | [<Unique>] Address of adress : string
        | [<Unique>] Affiliation of affiliation : string
        | [<Unique>] ORCID of orcid : string
        | [<Unique>] Roles of roles : string
        | [<Unique>] RolesTermAccessionNumber of roles_term_accession_number : string
        | [<Unique>] RolesTermSourceREF of roles_term_source_ref : string

        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | StudyIdentifier           _ -> "Identifier of the study the person is associated with"
                | LastName                  _ -> "The last name of a person associated with the study"
                | FirstName                 _ -> "The first name of a person associated with the study"
                | MidInitials               _ -> "The middle initials of a person associated with the study"
                | Email                     _ -> "The email address of a person associated with the study"
                | Phone                     _ -> "The telephone number of a person associated with the study"
                | Fax                       _ -> "The fax number of a person associated with the study"
                | Address                   _ -> "The address of a person associated with the study"
                | Affiliation               _ -> "The organization affiliation for a person associated with the study"
                | ORCID                     _ -> "The ORCID ID of the person"
                | Roles                     _ -> "Term to classify the role(s) performed by this person in the context of the study, which means that the roles reported here do not need to correspond to roles held withing their affiliated organization. Multiple annotations or values attached to one person can be provided by using a semicolon (“;”) Unicode (U0003+B) as a separator (e.g.: submitter;funder;sponsor). The term can be free text or from, for example, a controlled vocabulary or an ontology. If the latter source is used the Term Accession Number and Term Source REF fields below are required."
                | RolesTermAccessionNumber  _ -> "The accession number from the Term Source associated with the selected term. If multiple role terms are defined, multiple accession numbers have to be defined accordingly, separated by a semicolon (“;”)."
                | RolesTermSourceREF        _ -> "Identifies the controlled vocabulary or ontology that this term comes from. The Source REF has to match one of the Term Source Names declared in the Ontology Source Reference section. If multiple role terms are defined, multiple source REFs have to be defined accordingly, separated by a semicolon (“;”)."


    /// CLI arguments for person removal.
    // Same arguments as `edit` because all metadata fields needed for identifying the person also have to be used when editing
    type PersonUnregisterArgs = PersonEditArgs

    /// CLI arguments for getting person.
    // Same arguments as `edit` because all metadata fields needed for identifying the person also have to be used when editing
    type PersonShowArgs = PersonEditArgs

/// CLI arguments for study Contacts.
module StudyPublications = 

    /// CLI arguments for updating existing publication metadata.
    type PublicationUpdateArgs =  
        | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of string
        | [<Mandatory>][<AltCommandLine("-d")>][<Unique>] DOI of doi : string
        | [<AltCommandLine("-p")>][<Unique>] PubMedID of pubmed_id : string
        | [<Unique>] AuthorList of author_list : string
        | [<Unique>] Title of publication_title : string
        | [<Unique>] Status of publication_status : string
        | [<Unique>] StatusTermAccessionNumber of publication_status_term_accession_number : string
        | [<Unique>] StatusTermSourceREF of publication_status_term_source_ref : string
        | [<Unique>] ReplaceWithEmptyValues
        | [<Unique>] AddIfMissing

        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | StudyIdentifier           _ -> "Identifier of the study the publication is associated with"
                | DOI                       _ -> "A Digital Object Identifier (DOI) for that publication (where available)"
                | PubMedID                  _ -> "The PubMed IDs of the described publication(s) associated with this study"
                | AuthorList                _ -> "The list of authors associated with that publication"
                | Title                     _ -> "The title of publication associated with the study"
                | Status                    _ -> "A term describing the status of that publication (i.e. submitted, in preparation, published)"
                | StatusTermAccessionNumber _ -> "The accession number from the Term Source associated with the selected term"
                | StatusTermSourceREF       _ -> "Identifies the controlled vocabulary or ontology that this term comes from. The Source REF has to match one the Term Source Names declared in the in the Ontology Source Reference section."
                | ReplaceWithEmptyValues    _ -> "This flag can be used to delete fields from the publication. If this flag is not set, only these fields for which a value was given will be updated."
                | AddIfMissing              _ -> "If this flag is set, a new publication will be registered with the given parameters, if it did not previously exist"

    /// CLI arguments for interactively editing existing publication metadata.
    type PublicationEditArgs = 
        | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of string
        | [<Mandatory>][<AltCommandLine("-d")>][<Unique>] DOI of doi : string
    
        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | StudyIdentifier   _ -> "Identifier of the study the publication is associated with"
                | DOI               _ -> "A Digital Object Identifier (DOI) for that publication (where available)"

    /// CLI arguments for registering publication metadata.
    type PublicationRegisterArgs = 
        | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of string
        | [<Mandatory>][<AltCommandLine("-d")>][<Unique>] DOI of doi : string
        | [<AltCommandLine("-p")>][<Unique>] PubMedID of pubmed_id : string
        | [<Unique>] AuthorList of author_list : string
        | [<Unique>] Title of publication_title : string
        | [<Unique>] Status of publication_status : string
        | [<Unique>] StatusTermAccessionNumber of publication_status_term_accession_number : string
        | [<Unique>] StatusTermSourceREF of publication_status_term_source_ref : string

        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | StudyIdentifier           _ -> "Identifier of the study the publication is associated with"
                | DOI                       _ -> "A Digital Object Identifier (DOI) for that publication (where available)"
                | PubMedID                  _ -> "The PubMed IDs of the described publication(s) associated with this study"
                | AuthorList                _ -> "The list of authors associated with that publication"
                | Title                     _ -> "The title of publication associated with the study"
                | Status                    _ -> "A term describing the status of that publication (i.e. submitted, in preparation, published)"
                | StatusTermAccessionNumber _ -> "The accession number from the Term Source associated with the selected term"
                | StatusTermSourceREF       _ -> "Identifies the controlled vocabulary or ontology that this term comes from. The Source REF has to match one of the Term Source Names declared in the in the Ontology Source Reference section."


    /// CLI arguments for publication removal.
    // Same arguments as `edit` because all metadata fields needed for identifying the publication also have to be used when editing
    type PublicationUnregisterArgs = PublicationEditArgs

    /// CLI arguments for getting publication.
    // Same arguments as `edit` because all metadata fields needed for identifying the publication also have to be used when editing
    type PublicationShowArgs = PublicationEditArgs

/// CLI arguments for study design descriptors.
module StudyDesignDescriptors = 

    /// CLI arguments for updating existing design metadata.
    type DesignUpdateArgs =  
        | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of string
        | [<Mandatory>][<AltCommandLine("-d")>][<Unique>] DesignType of design_type : string
        | [<Unique>] TypeTermAccessionNumber of type_term_accession_number : string
        | [<Unique>] TypeTermSourceREF of type_term_source_ref : string
        | [<Unique>] ReplaceWithEmptyValues
        | [<Unique>] AddIfMissing

        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | StudyIdentifier           _ -> "Identifier of the study the design is associated with"
                | DesignType                _ -> "A term allowing the classification of the study based on the overall experimental design, e.g cross-over design or parallel group design. The term can be free text or from, for example, a controlled vocabulary or an ontology. If the latter source is used the Term Accession Number (TAN) and Term Source REF fields below are required."
                | TypeTermAccessionNumber   _ -> "The accession number from the Term Source associated with the selected term."
                | TypeTermSourceREF         _ -> "Identifies the controlled vocabulary or ontology that this term comes from. The Study Design Term Source REF has to match one of the Term Source Names declared in the Ontology Source Reference section."
                | ReplaceWithEmptyValues    _ -> "This flag can be used to delete fields from the design. If this flag is not set, only these fields for which a value was given will be updated."
                | AddIfMissing              _ -> "If this flag is set, a new design will be registered with the given parameters, if it did not previously exist"

    /// CLI arguments for interactively editing existing design metadata.
    type DesignEditArgs = 
        | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of string
        | [<Mandatory>][<AltCommandLine("-d")>][<Unique>] DesignType of design_type : string
    
        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | StudyIdentifier   _ -> "Identifier of the study the design is associated with"
                | DesignType        _ -> "A term allowing the classification of the study based on the overall experimental design, e.g cross-over design or parallel group design. The term can be free text or from, for example, a controlled vocabulary or an ontology. If the latter source is used the Term Accession Number (TAN) and Term Source REF fields below are required."

    /// CLI arguments for registering design metadata.
    type DesignRegisterArgs =
        | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of string
        | [<Mandatory>][<AltCommandLine("-d")>][<Unique>] DesignType of design_type : string
        | [<Unique>] TypeTermAccessionNumber of type_term_accession_number : string
        | [<Unique>] TypeTermSourceREF of type_term_source_ref : string

        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | StudyIdentifier           _ -> "Identifier of the study the design is associated with"
                | DesignType                _ -> "A term allowing the classification of the study based on the overall experimental design, e.g cross-over design or parallel group design. The term can be free text or from, for example, a controlled vocabulary or an ontology. If the latter source is used the Term Accession Number (TAN) and Term Source REF fields below are required."
                | TypeTermAccessionNumber   _ -> "The accession number from the Term Source associated with the selected term"
                | TypeTermSourceREF         _ -> "Identifies the controlled vocabulary or ontology that this term comes from. The Study Design Term Source REF has to match one of the Term Source Names declared in the Ontology Source Reference section."


    /// CLI arguments for design removal.
    // Same arguments as `edit` because all metadata fields needed for identifying the publication also have to be used when editing
    type DesignUnregisterArgs = DesignEditArgs

    /// CLI arguments for getting design.
    // Same arguments as `edit` because all metadata fields needed for identifying the publication also have to be used when editing
    type DesignShowArgs = DesignEditArgs

/// CLI arguments for study factors.
module StudyFactors = 

    /// CLI arguments for updating existing design metadata.
    type FactorUpdateArgs =  
        | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of string
        | [<Mandatory>][<AltCommandLine("-n")>][<Unique>] Name of name : string
        | [<Unique>] FactorType of factor_type : string
        | [<Unique>] TypeTermAccessionNumber of type_term_accession_number : string
        | [<Unique>] TypeTermSourceREF of type_term_source_ref : string
        | [<Unique>] ReplaceWithEmptyValues
        | [<Unique>] AddIfMissing

        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | StudyIdentifier           _ -> "Identifier of the study the design is associated with"
                | Name                      _ -> "The name of one factor used in the Study and/or Assay files. A factor corresponds to an independent variable manipulated by the experimentalist with the intention to affect biological systems in a way that can be measured by an assay. The value of a factor is given in the Study or Assay file, accordingly. If both Study and Assay have a Factor Value, these must be different."
                | FactorType                _ -> "A term allowing the classification of this factor into categories. The term can be free text or from, for example, a controlled vocabulary or an ontology. If the latter source is used the Term Accession Number (TAN) and Term Source REF fields below are required."
                | TypeTermAccessionNumber   _ -> "The accession number from the Term Source associated with the selected term."
                | TypeTermSourceREF         _ -> "Identifies the controlled vocabulary or ontology that this term comes from. The Source REF has to match one of the Term Source Names declared in the Ontology Source Reference section."
                | ReplaceWithEmptyValues    _ -> "This flag can be used to delete fields from the factor. If this flag is not set, only these fields for which a value was given will be updated."
                | AddIfMissing              _ -> "If this flag is set, a new factor will be registered with the given parameters, if it did not previously exist"

    /// CLI arguments for interactively editing existing factor metadata.
    type FactorEditArgs = 
        | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of string
        | [<Mandatory>][<AltCommandLine("-n")>][<Unique>] Name of name:string
    
        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | StudyIdentifier   _ -> "Identifier of the study the design is associated with"
                | Name              _ -> "The name of one factor used in the Study and/or Assay files. A factor corresponds to an independent variable manipulated by the experimentalist with the intention to affect biological systems in a way that can be measured by an assay. The value of a factor is given in the Study or Assay file, accordingly. If both Study and Assay have a Factor Value, these must be different."

    /// CLI arguments for registering factor metadata.
    type FactorRegisterArgs = 
        | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of string
        | [<Mandatory>][<AltCommandLine("-n")>][<Unique>] Name of name : string
        | [<Unique>] FactorType of factor_type:string
        | [<Unique>] TypeTermAccessionNumber of type_term_accession_number : string
        | [<Unique>] TypeTermSourceREF of type_term_source_ref : string

        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | StudyIdentifier           _ -> "Identifier of the study the design is associated with"
                | Name                      _ -> "The name of one factor used in the Study and/or Assay files. A factor corresponds to an independent variable manipulated by the experimentalist with the intention to affect biological systems in a way that can be measured by an assay. The value of a factor is given in the Study or Assay file, accordingly. If both Study and Assay have a Factor Value, these must be different."
                | FactorType                _ -> "A term allowing the classification of this factor into categories. The term can be free text or from, for example, a controlled vocabulary or an ontology. If the latter source is used the Term Accession Number (TAN) and Term Source REF fields below are required."
                | TypeTermAccessionNumber   _ -> "The accession number from the Term Source associated with the selected term"
                | TypeTermSourceREF         _ -> "Identifies the controlled vocabulary or ontology that this term comes from. The Source REF has to match one of the Term Source Names declared in the Ontology Source Reference section."

    /// CLI arguments for factor removal.
    // Same arguments as `edit` because all metadata fields needed for identifying the publication also have to be used when editing
    type FactorUnregisterArgs = FactorEditArgs

    /// CLI arguments for getting factor.
    // Same arguments as `edit` because all metadata fields needed for identifying the publication also have to be used when editing
    type FactorShowArgs = FactorEditArgs

/// CLI arguments for study factors.
module StudyProtocols = 

    /// CLI arguments for updating existing protocol metadata.
    type ProtocolUpdateArgs =  
        | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of string
        | [<Mandatory>][<AltCommandLine("-n")>][<Unique>] Name of name : string
        | [<Unique>] ProtocolType of protocol_type:string
        | [<Unique>] TypeTermAccessionNumber of type_term_accession_number : string
        | [<Unique>] TypeTermSourceREF of type_term_source_ref : string
        | [<Unique>] Description of description : string
        | [<Unique>] URI of uri : string
        | [<Unique>] Version of version : string
        | [<Unique>] ParametersName of parameters_name : string
        | [<Unique>] ParametersTermAccessionNumber of parameters_term_accession_number : string
        | [<Unique>] ParametersTermSourceREF of parameters_term_source_ref : string
        | [<Unique>] ComponentsName of compoments_name : string
        | [<Unique>] ComponentsType of compoments_type : string
        | [<Unique>] ComponentsTypeTermAccessionNumber of compoments_type_accession_number : string
        | [<Unique>] ComponentsTypeTermSourceREF of compoments_type_term_source_ref : string
        | [<Unique>] ReplaceWithEmptyValues
        | [<Unique>] AddIfMissing

        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | StudyIdentifier                   _ -> "Identifier of the study the design is associated with"
                | Name                              _ -> "The name of the protocols used within the ISA-Tab document. The names are used as identifiers within the ISA-Tab document and will be referenced in the Study and Assay files in the Protocol REF columns. Names can be either local identifiers, unique within the ISA Archive which contains them, or fully qualified external accession numbers."
                | ProtocolType                      _ -> "Term to classify the protocol. The term can be free text or from, for example, a controlled vocabulary or an ontology. If the latter source is used the Term Accession Number (TAN) and Term Source REF fields below are required."
                | TypeTermAccessionNumber           _ -> "The accession number from the Term Source associated with the selected term."
                | TypeTermSourceREF                 _ -> "Identifies the controlled vocabulary or ontology that this term comes from. The Source REF has to match one of the Term Source Names declared in the Ontology Source Reference section."
                | Description                       _ -> "A free-text description of the protocol"
                | URI                               _ -> "Pointer to protocol resources external to the ISA-Tab that can be accessed by their Uniform Resource Identifier (URI)"
                | Version                           _ -> "An identifier for the version to ensure protocol tracking"
                | ParametersName                    _ -> "A semicolon-delimited (“;”) list of parameter names, used as an identifier within the ISA-Tab document. These names are used in the Study and Assay files (in the “Parameter Value []” column heading) to list the values used for each protocol parameter. Refer to section Multiple values fields in the Investigation File on how to encode multiple values in one field and match term sources"
                | ParametersTermAccessionNumber     _ -> "A semicolon-delimited (“;”) list of accession numbers from the Term Source associated with the selected terms. "
                | ParametersTermSourceREF           _ -> "A semicolon-delimited (“;”) list of Source REFs. Identifies the controlled vocabulary or ontology that this term comes from. The Source REF has to match one of the Term Source Names declared in the Ontology Source Reference section."
                | ComponentsName                    _ -> "A semicolon-delimited (“;”) list of a protocol’s components; e.g. instrument names, software names, and reagents names. Refer to section Multiple values fields in the Investigation File on how to encode multiple components in one field and match term sources."
                | ComponentsType                    _ -> "A semicolon-delimited (“;”) list of terms to classify the protocol components listed for example, instrument, software, detector or reagent. The term can be free text or from, for example, a controlled vocabulary or an ontology. If the latter source is used the Term Accession Number (TAN) and Term Source REF fields below are required."
                | ComponentsTypeTermAccessionNumber _ -> "A semicolon-delimited (“;”) list of accession numbers from the Source associated to the selected terms"
                | ComponentsTypeTermSourceREF       _ -> "A semicolon-delimited (“;”) list of Source REFs. Identifies the controlled vocabulary or ontology that this term comes from. The Source REF has to match a Term Source Name previously declared in the ontology section."
                | ReplaceWithEmptyValues            _ -> "This flag can be used to delete fields from the protocol. If this flag is not set, only these fields for which a value was given will be updated."
                | AddIfMissing                      _ -> "If this flag is set, a new protocol will be registered with the given parameters, if it did not previously exist"

    /// CLI arguments for interactively editing existing protocol metadata.
    type ProtocolEditArgs = 
        | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of string
        | [<Mandatory>][<AltCommandLine("-n")>][<Unique>] Name of name:string
    
        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | StudyIdentifier   _ -> "Identifier of the study the design is associated with"
                | Name              _ -> "The name of one factor used in the Study and/or Assay files. A factor corresponds to an independent variable manipulated by the experimentalist with the intention to affect biological systems in a way that can be measured by an assay. The value of a factor is given in the Study or Assay file, accordingly. If both Study and Assay have a Factor Value, these must be different."

    /// CLI arguments for registering protocol metadata.
    type ProtocolRegisterArgs = 
        | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of string
        | [<Mandatory>][<AltCommandLine("-n")>][<Unique>] Name of name : string
        | [<Unique>] ProtocolType of protocol_type : string
        | [<Unique>] TypeTermAccessionNumber of type_term_accession_number : string
        | [<Unique>] TypeTermSourceREF of type_term_source_ref : string
        | [<Unique>] Description of description : string
        | [<Unique>] URI of uri : string
        | [<Unique>] Version of version : string
        | [<Unique>] ParametersName of parameters_name : string
        | [<Unique>] ParametersTermAccessionNumber of parameters_term_accession_number : string
        | [<Unique>] ParametersTermSourceREF of parameters_term_source_ref : string
        | [<Unique>] ComponentsName of compoments_name : string
        | [<Unique>] ComponentsType of compoments_type : string
        | [<Unique>] ComponentsTypeTermAccessionNumber of compoments_type_accession_number : string
        | [<Unique>] ComponentsTypeTermSourceREF of compoments_type_term_source_ref : string

        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | StudyIdentifier                   _ -> "Identifier of the study the design is associated with"
                | Name                              _ -> "The name of the protocols used within the ISA-Tab document. The names are used as identifiers within the ISA-Tab document and will be referenced in the Study and Assay files in the Protocol REF columns. Names can be either local identifiers, unique within the ISA Archive which contains them, or fully qualified external accession numbers."
                | ProtocolType                      _ -> "Term to classify the protocol. The term can be free text or from, for example, a controlled vocabulary or an ontology. If the latter source is used the Term Accession Number (TAN) and Term Source REF fields below are required."
                | TypeTermAccessionNumber           _ -> "The accession number from the Term Source associated with the selected term"
                | TypeTermSourceREF                 _ -> "Identifies the controlled vocabulary or ontology that this term comes from. The Source REF has to match one of the Term Source Names declared in the Ontology Source Reference section."
                | Description                       _ -> "A free-text description of the protocol"
                | URI                               _ -> "Pointer to protocol resources external to the ISA-Tab that can be accessed by their Uniform Resource Identifier (URI)"
                | Version                           _ -> "An identifier for the version to ensure protocol tracking"
                | ParametersName                    _ -> "A semicolon-delimited (“;”) list of parameter names, used as an identifier within the ISA-Tab document. These names are used in the Study and Assay files (in the “Parameter Value []” column heading) to list the values used for each protocol parameter. Refer to section Multiple values fields in the Investigation File on how to encode multiple values in one field and match term sources."
                | ParametersTermAccessionNumber     _ -> "The accession number from the Term Source associated with the selected term"
                | ParametersTermSourceREF           _ -> "Identifies the controlled vocabulary or ontology that this term comes from. The Source REF has to match one of the Term Source Names declared in the Ontology Source Reference section."
                | ComponentsName                    _ -> "A semicolon-delimited (“;”) list of a protocol’s components; e.g. instrument names, software names, and reagents names. Refer to section Multiple values fields in the Investigation File on how to encode multiple components in one field and match term sources."
                | ComponentsType                    _ -> "Term to classify the protocol components listed for example, instrument, software, detector or reagent. The term can be free text or from, for example, a controlled vocabulary or an ontology. If the latter source is used the Term Accession Number (TAN) and Term Source REF fields below are required."
                | ComponentsTypeTermAccessionNumber _ -> "The accession number from the Source associated to the selected terms"
                | ComponentsTypeTermSourceREF       _ -> "Identifies the controlled vocabulary or ontology that this term comes from. The Source REF has to match a Term Source Names previously declared in the ontology section."


    /// CLI arguments for protocol removal.
    // Same arguments as `edit` because all metadata fields needed for identifying the publication also have to be used when editing
    type ProtocolUnregisterArgs = ProtocolEditArgs

    /// CLI arguments for loading a protocol from a file.
    type ProtocolLoadArgs =
        | [<Mandatory>][<AltCommandLine("-s")>][<Unique>] StudyIdentifier of string
        | [<Mandatory>][<AltCommandLine("-i")>][<Unique>] InputPath of string
        | [<Unique>] IsProcessFile
        | [<Unique>] UpdateExisting        

        interface IArgParserTemplate with
            member this.Usage =
                match this with
                | StudyIdentifier   _ -> "The identifier of the study the protocol should be added to"
                | InputPath         _ -> "The Path of the ISA JSON file which should loaded"
                | IsProcessFile     _ -> "If this flag is set, the reader will assume the input file is a process file, from which the protocol will be extracted"
                | UpdateExisting    _ -> "If set, if a protocol with the same name as the one given in the file already exists in the investigation. Its values will get overwritten by the ones in the file"

    /// CLI arguments for getting protocol.
    // Same arguments as `edit` because all metadata fields needed for identifying the publication also have to be used when editing
    type ProtocolShowArgs = ProtocolEditArgs
